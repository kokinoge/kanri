generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime? @map("email_verified")
  image          String?
  password       String?
  role           String    @default("member")
  department     String?
  isActive       Boolean   @default(true) @map("is_active")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  accounts       Account[]
  managedClients Client[]  @relation("ClientManager")
  sessions       Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Client {
  id               String     @id @default(cuid())
  name             String
  createdAt        DateTime   @default(now()) @map("created_at")
  updatedAt        DateTime   @updatedAt @map("updated_at")
  managerId        String?    @map("manager_id")
  agency           String?
  salesChannel     String?    @map("sales_channel")
  salesDepartment  String     @map("sales_department")
  businessDivision String     @map("business_division")
  priority         String?    @default("C")
  campaigns        Campaign[]
  manager          User?      @relation("ClientManager", fields: [managerId], references: [id])

  @@map("clients")
}

model Campaign {
  id            String         @id @default(cuid())
  clientId      String         @map("client_id")
  name          String
  purpose       String?
  totalBudget   Decimal        @db.Decimal(12, 2)
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  startYear     Int            @map("start_year")
  startMonth    Int            @map("start_month")
  endYear       Int?           @map("end_year")
  endMonth      Int?           @map("end_month")
  budgets       Budget[]
  campaignKpis  CampaignKpi[]
  campaignTeams CampaignTeam[]
  client        Client         @relation(fields: [clientId], references: [id])
  results       Result[]

  @@map("campaigns")
}

model Budget {
  id            String       @id @default(cuid())
  campaignId    String       @map("campaign_id")
  year          Int
  month         Int
  platform      String
  operationType String       @map("operation_type")
  amount        Decimal      @db.Decimal(12, 2)
  targetKpi     String?
  targetValue   Decimal?     @db.Decimal(12, 2)
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  budgetType    String       @map("budget_type")
  budgetTeams   BudgetTeam[]
  campaign      Campaign     @relation(fields: [campaignId], references: [id])

  @@map("budgets")
}

model Result {
  id            String   @id @default(cuid())
  campaignId    String   @map("campaign_id")
  year          Int
  month         Int
  platform      String
  operationType String   @map("operation_type")
  actualSpend   Decimal  @db.Decimal(12, 2)
  actualResult  Decimal  @db.Decimal(12, 2)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  budgetType    String   @map("budget_type")
  campaign      Campaign @relation(fields: [campaignId], references: [id])

  @@map("results")
}

model Master {
  id       String @id @default(cuid())
  category String
  value    String
  order    Int    @default(0)

  @@map("masters")
}

model Team {
  id            String         @id @default(cuid())
  name          String         @unique
  description   String?
  color         String?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  budgetTeams   BudgetTeam[]
  campaignTeams CampaignTeam[]

  @@map("teams")
}

model BudgetTeam {
  id         String   @id @default(cuid())
  budgetId   String   @map("budget_id")
  teamId     String   @map("team_id")
  allocation Decimal  @db.Decimal(5, 2)
  createdAt  DateTime @default(now()) @map("created_at")
  budget     Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  team       Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([budgetId, teamId])
  @@map("budget_teams")
}

model CampaignTeam {
  id         String   @id @default(cuid())
  campaignId String   @map("campaign_id")
  teamId     String   @map("team_id")
  role       String?
  isLead     Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at")
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  team       Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([campaignId, teamId])
  @@map("campaign_teams")
}

model CampaignKpi {
  id          String   @id @default(cuid())
  campaignId  String   @map("campaign_id")
  kpiType     String
  targetValue Decimal  @db.Decimal(15, 2)
  actualValue Decimal? @db.Decimal(15, 2)
  unit        String
  description String?
  priority    Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("campaign_kpis")
}

/// We could not retrieve columns for the underlying table. Either it has none or you are missing rights to see them. Please check your privileges.
// model business_divisions {
// }

/// We could not retrieve columns for the underlying table. Either it has none or you are missing rights to see them. Please check your privileges.
// model sales_departments {
// }
